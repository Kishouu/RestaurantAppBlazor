@page "/orders"
@using Microsoft.JSInterop
@inject OrderService OrderService
@inject NavigationManager NavManager
@inject IJSRuntime JS

<h2>Orders</h2>

@if (orders == null || !orders.Any())
{
    <p><em>No orders found.</em></p>
}
else
{
    <table class="table table-striped table-hover">
      <thead>
        <tr>
          <th>Order ID</th>
          <th>User</th>
          <th>Date</th>
          <th>Status</th>
          <th>Total</th>
          <th>Actions</th>
        </tr>
      </thead>
      <tbody>
      @foreach (var order in orders)
      {
        <tr>
          <td>@order.OrderId</td>
          <td>@order.User?.Name</td>
          <td>@order.OrderDate.ToShortDateString()</td>
          <td><span class="badge bg-secondary">@order.Status</span></td>
          <td>@order.TotalPrice.ToString("C")</td>
          <td>
            <button class="btn btn-sm btn-primary me-2" @onclick="() => ViewOrder(order.OrderId)">View</button>
            <button class="btn btn-sm btn-danger" @onclick="() => DeleteOrder(order.OrderId)">Delete</button>
          </td>
        </tr>
      }
      </tbody>
    </table>
}

<button class="btn btn-success" @onclick="NewOrder">Create Order</button>

@code {
  private List<Order> orders = new();

  protected override async Task OnInitializedAsync()
  {
    await LoadOrders();
  }

  private async Task LoadOrders()
  {
    orders = await OrderService.GetAllAsync();
  }

  private void ViewOrder(int id)
  {
    NavManager.NavigateTo($"/orders/{id}");
  }

  private void NewOrder()
  {
    NavManager.NavigateTo("/orders/create");
  }

  private async Task DeleteOrder(int id)
  {
    var confirmed = await JS.InvokeAsync<bool>("confirm", $"Are you sure you want to delete Order #{id}?");
    if (confirmed)
    {
      await OrderService.DeleteAsync(id);
      await LoadOrders();
    }
  }
}

