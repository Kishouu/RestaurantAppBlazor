@page "/users/edit/{UserId:int}"
@using Restaurant.Models
@using Restaurant.Services
@using Microsoft.JSInterop
@inject UserService UserService
@inject NavigationManager NavManager
@inject IJSRuntime JSRuntime

<h2 class="mb-4">@((UserId == 0) ? "Add New User" : "Edit User")</h2>

<EditForm Model="user" OnValidSubmit="Save" class="needs-validation" novalidate>
    <DataAnnotationsValidator />
    <ValidationSummary class="text-danger" />

    <div class="mb-3">
        <label for="userName" class="form-label">Name</label>
        <InputText id="userName" class="form-control" @bind-Value="user.Name" placeholder="Enter user name" />
    </div>

    <hr />

    <h4>Addresses</h4>

    @foreach (var addr in addressInputs.Select((address, index) => (address, index)))
    {
        <div class="address-block mb-3 p-3 border rounded bg-light position-relative">
            <button type="button" class="btn btn-danger btn-sm position-absolute top-0 end-0 m-2"
                    @onclick="() => ConfirmRemoveAddress(addr.index)">
                Delete
            </button>

            <div class="mb-2">
                <label class="form-label">Street</label>
                <InputText class="form-control" placeholder="Street" @bind-Value="addr.address.Street" />
            </div>
            <div class="mb-2">
                <label class="form-label">City</label>
                <InputText class="form-control" placeholder="City" @bind-Value="addr.address.City" />
            </div>
            <div class="mb-2">
                <label class="form-label">Postal Code</label>
                <InputText class="form-control" placeholder="Postal Code" @bind-Value="addr.address.PostalCode" />
            </div>
        </div>
    }

    <button type="button" class="btn btn-outline-secondary mb-3" @onclick="AddAddressInput">
        <i class="bi bi-plus-lg"></i> Add Address
    </button>

    <div class="d-flex gap-2">
        <button type="submit" class="btn btn-primary">Save</button>
        <button type="button" class="btn btn-outline-secondary" @onclick="Cancel">Cancel</button>
    </div>
</EditForm>

@code {
    [Parameter] public int UserId { get; set; }

    private User user = new();
    private List<Address> addressInputs = new();

    protected override async Task OnInitializedAsync()
    {
        if (UserId != 0)
        {
            var existing = await UserService.GetByIdAsync(UserId);
            if (existing != null)
            {
                user = existing;
                addressInputs = user.Addresses.Select(a => new Address
                {
                    AddressId = a.AddressId,  // Keep AddressId to track DB records for delete
                    Street = a.Street,
                    City = a.City,
                    PostalCode = a.PostalCode
                }).ToList();
            }
        }
        else
        {
            // New user: start with one empty address input
            addressInputs.Add(new Address());
        }
    }

    private async Task Save()
    {
        // Validate at least one complete address
        bool hasValid = addressInputs.Any(a =>
            !string.IsNullOrWhiteSpace(a.Street) &&
            !string.IsNullOrWhiteSpace(a.City) &&
            !string.IsNullOrWhiteSpace(a.PostalCode));

        if (!hasValid)
        {
            // Show message or use validation summary (can be improved to show UI feedback)
            Console.WriteLine("At least one complete address is required.");
            return;
        }

        // Assign filtered addresses to user entity
        user.Addresses = addressInputs
            .Where(a => !string.IsNullOrWhiteSpace(a.Street)
                     && !string.IsNullOrWhiteSpace(a.City)
                     && !string.IsNullOrWhiteSpace(a.PostalCode))
            .ToList();

        // Save user with updated addresses (including new/edited)
        await UserService.AddOrUpdateAsync(user);

        // Navigate back to users list after save
        NavManager.NavigateTo("/users");
    }

    private void AddAddressInput()
    {
        addressInputs.Add(new Address());
    }

    private async Task RemoveAddressInput(int index)
{
    if (index >= 0 && index < addressInputs.Count)
    {
        var addrToDelete = addressInputs[index];
        if (addrToDelete.AddressId != 0)
        {
            try
            {
                await UserService.DeleteAddressAsync(addrToDelete.AddressId);
                addressInputs.RemoveAt(index);
            }
            catch (InvalidOperationException ex)
            {
                await JSRuntime.InvokeVoidAsync("alert", ex.Message);
            }
            catch (Exception ex)
            {
                await JSRuntime.InvokeVoidAsync("alert", "Error deleting address: " + ex.Message);
            }
        }
        else
        {
            addressInputs.RemoveAt(index);
        }
    }
}

    private async Task ConfirmRemoveAddress(int index)
    {
        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Delete this address?");
        if (confirmed)
        {
            await RemoveAddressInput(index);
            StateHasChanged();
        }
    }

    private void Cancel()
    {
        NavManager.NavigateTo("/users");
    }
}
