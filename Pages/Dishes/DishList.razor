@page "/dishes"
@inject DishService DishService
@using Microsoft.JSInterop
@inject NavigationManager NavManager
@inject IJSRuntime JsRuntime
@using Restaurant.Models

<h2 class="mb-4 text-primary fw-bold">Dishes</h2>

<div class="d-flex flex-wrap align-items-center mb-3 gap-2">
    <input @bind="searchText" class="form-control flex-grow-1" placeholder="Search dishes..." aria-label="Search dishes" />
    
    <div class="form-check ms-2">
        <input class="form-check-input" type="checkbox" id="useRegex" @bind="useRegex" />
        <label class="form-check-label" for="useRegex">Use Regex</label>
    </div>

    <button class="btn btn-primary" @onclick="Search" aria-label="Search Dishes">
        <i class="bi bi-search me-1"></i> Search
    </button>

    <button class="btn btn-success ms-auto" @onclick="NewDish" aria-label="Add New Dish">
        <i class="bi bi-plus-lg me-1"></i> Add Dish
    </button>
</div>

@if (dishes == null || !dishes.Any())
{
    <div class="alert alert-info" role="alert">
        No dishes found.
    </div>
}
else
{
    <table class="table table-striped align-middle table-hover">
        <thead class="table-light">
            <tr>
                <th style="width:60px;">Image</th>
                <th>Name</th>
                <th style="width:100px;">Price</th>
                <th>Description</th>
                <th style="width:180px;">Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var dish in dishes)
            {
                <tr>
                    <td>
                        @if (!string.IsNullOrEmpty(dish.ImagePath))
                        {
                            <img src="@dish.ImagePath" alt="@dish.Name" class="img-thumbnail rounded" style="width:50px; height:50px; object-fit:cover;" />
                        }
                    </td>
                    <td>@dish.Name</td>
                    <td>@dish.Price.ToString("C")</td>
                    <td>
                        @(dish.Description?.Length > 60 ? dish.Description.Substring(0, 60) + "..." : dish.Description)
                    </td>
                    <td>
                        <button class="btn btn-sm btn-outline-primary me-1" @onclick="() => EditDish(dish.DishId)" aria-label="Edit @dish.Name">
                            <i class="bi bi-pencil"></i>
                        </button>
                        <button class="btn btn-sm btn-outline-danger me-1" @onclick="() => DeleteDish(dish.DishId)" aria-label="Delete @dish.Name">
                            <i class="bi bi-trash"></i>
                        </button>
                        <button class="btn btn-sm btn-outline-secondary" @onclick="() => ViewDetails(dish.DishId)" aria-label="View details of @dish.Name">
                            <i class="bi bi-eye"></i>
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Dish> dishes = new();
    private string? searchText;
    private bool useRegex;

    protected override async Task OnInitializedAsync()
    {
        dishes = await DishService.GetAllAsync();
    }

    private async Task Search()
    {
        dishes = await DishService.SearchAsync(searchText, useRegex);
    }

    private void NewDish()
    {
        NavManager.NavigateTo("/dishes/edit/0");
    }

    private void EditDish(int id)
    {
        NavManager.NavigateTo($"/dishes/edit/{id}");
    }

    private async Task DeleteDish(int id)
    {
        bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to delete this dish?");
        if (confirmed)
        {
            await DishService.DeleteAsync(id);
            dishes = await DishService.GetAllAsync();
        }
    }

    private void ViewDetails(int id)
    {
        NavManager.NavigateTo($"/dishes/{id}");
    }
}

