@page "/dishes/edit/{DishId:int}"
@using Microsoft.JSInterop
@inject DishService DishService
@inject NavigationManager NavManager
@inject IJSRuntime JsRuntime
@using Restaurant.Models
@using Microsoft.AspNetCore.Components.Forms

<h2 class="mb-4 text-center">
    @(DishId == 0 ? "Add New Dish" : "Edit Dish")
</h2>

<EditForm Model="dish" OnValidSubmit="Save" class="needs-validation" novalidate>
    <DataAnnotationsValidator />
    <ValidationSummary class="text-danger mb-3" />

    <div class="mb-4">
        <label for="dishName" class="form-label fw-semibold">Name</label>
        <InputText id="dishName" class="form-control" @bind-Value="dish.Name" placeholder="Enter dish name" />
    </div>

    <div class="mb-4">
        <label for="dishDescription" class="form-label fw-semibold">Description</label>
        <InputTextArea id="dishDescription" class="form-control" @bind-Value="dish.Description" rows="4" placeholder="Enter dish description" />
    </div>

    <div class="mb-4">
        <label for="dishPrice" class="form-label fw-semibold">Price ($)</label>
        <InputNumber id="dishPrice" class="form-control" @bind-Value="dish.Price" step="0.01" placeholder="0.00" />
    </div>

    <div class="mb-4">
        <label class="form-label fw-semibold">Image</label><br />
        <InputFile OnChange="OnInputFileChange" accept=".jpg,.jpeg,.png,.gif" class="form-control form-control-sm" />
        @if (!string.IsNullOrEmpty(dish.ImagePath))
        {
            <img src="@dish.ImagePath" alt="@dish.Name" class="img-thumbnail mt-3" style="max-width: 150px; max-height:150px;" />
        }
    </div>

    <div class="d-flex justify-content-center gap-3">
        <button type="submit" class="btn btn-primary btn-lg px-5 shadow-sm">
            Save
        </button>
        <button type="button" class="btn btn-outline-secondary btn-lg px-5 shadow-sm" @onclick="Cancel">
            Cancel
        </button>
    </div>
</EditForm>

@code {
    [Parameter]
    public int DishId { get; set; }

    private Dish dish = new();

    private const long MaxFileSize = 5 * 1024 * 1024; // 5MB limit

    protected override async Task OnInitializedAsync()
    {
        if (DishId != 0)
        {
            var existing = await DishService.GetByIdAsync(DishId);
            if (existing != null)
            {
                dish = existing;
            }
        }
    }

    private async Task Save()
    {
        await DishService.AddOrUpdateAsync(dish);
        NavManager.NavigateTo("/dishes");
    }

    private void Cancel()
    {
        NavManager.NavigateTo("/dishes");
    }

    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        var file = e.File;
        var extension = Path.GetExtension(file.Name).ToLowerInvariant();
        var allowed = new[] { ".jpg", ".jpeg", ".png", ".gif" };
        if (!allowed.Contains(extension))
        {
            await JsRuntime.InvokeVoidAsync("alert", "Invalid file type. Allowed: jpg, jpeg, png, gif.");
            return;
        }

        if (file.Size > MaxFileSize)
        {
            await JsRuntime.InvokeVoidAsync("alert", $"File size exceeds {MaxFileSize / (1024 * 1024)}MB limit.");
            return;
        }

        var uploads = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot", "images");
        if (!Directory.Exists(uploads))
            Directory.CreateDirectory(uploads);

        var fileName = $"{Guid.NewGuid()}{extension}";
        var filePath = Path.Combine(uploads, fileName);

        await using var stream = file.OpenReadStream(MaxFileSize);
        await using var fs = new FileStream(filePath, FileMode.Create);
        await stream.CopyToAsync(fs);

        dish.ImagePath = $"/images/{fileName}";
        StateHasChanged();
    }
}

